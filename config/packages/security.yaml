security:
    erase_credentials: false

    role_hierarchy:
        ROLE_ADMIN: ROLE_EEZ
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        legacy_bcrypt:
            algorithm: bcrypt

        App\Entity\User:
            algorithm: auto
            migrate_from:
                - legacy_bcrypt

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        amreu_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: amreu_user_provider


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            custom_authenticators:
                - amreu.login.form.passportauthenticator
            entry_point: amreu.login.form.passportauthenticator

            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds

            # form_login:
            #   login_path: user_security_login_check
            #   check_path: user_security_login_check

            logout:
                path: user_security_logout

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/build/, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_EEZ }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
