security:
  erase_credentials: false

  role_hierarchy:
    ROLE_ADMIN: ROLE_EEZ
    ROLE_SUPER_ADMIN: ROLE_ADMIN

  # https://symfony.com/doc/current/security/experimental_authenticators.html
  enable_authenticator_manager: true

  # https://symfony.com/doc/current/security.html#c-hashing-passwords
  password_hashers:
    legacy_bcrypt:
      algorithm: bcrypt

    App\Entity\User:
      algorithm: auto
      migrate_from:
        - legacy_bcrypt

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    amreu_user_provider:
      entity:
        class: App\Entity\User
        property: username

    role_hierarchy:
        ROLE_ADMIN:       [ROLE_EEZ]

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: amreu_user_provider

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication
      custom_authenticators:
        - amreu.login.form.passportauthenticator
      entry_point: amreu.login.form.passportauthenticator

      remember_me:
        secret:   '%kernel.secret%' # required
        lifetime: 604800 # 1 week in seconds

      # form_login:
      #   login_path: user_security_login_check
      #   check_path: user_security_login_check

      logout:
        path: user_security_logout

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login$, roles: PUBLIC_ACCESS }
    - { path: ^/build/, roles: PUBLIC_ACCESS }
    - { path: ^/, roles: ROLE_EEZ }
